- hosts: agents
  remote_user: ubuntu
  become: true
  vars_files:
    - vars/variables.yaml
  tasks:
    - name: set facts
      set_fact:
        cni_host_subnet: "100.200.{{ groups['agents'].index(inventory_hostname) }}.0/24"

    - name: install prerequisite software
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop: [socat, conntrack, ipset]

    - name: create folders
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "/etc/cni/net.d"
        - "/opt/cni/bin"
        - "/var/lib/kubelet"
        - "/var/lib/kube-proxy"
        - "/var/lib/kubernetes"
        - "/var/run/kubernetes"
        - "/etc/containerd"

    - name: download binaries, archives
      get_url:
        url: "{{ item }}"
        dest: /home/ubuntu/
        mode: 0644
      loop:
        - "{{ runsc_URL }}"
        - "{{ runc_URL }}"
        - "{{ kubectl_URL }}"
        - "{{ kube_proxy_URL }}"
        - "{{ kubelet_URL }}"

    - name: instantiate runsc
      copy:
        src: "/home/ubuntu/runsc-50c283b9f56bb7200938d9e207355f05f79f0d17"
        dest: "/home/ubuntu/runsc"
        mode: 755
        remote_src: yes

    - name: instantiate runc
      copy:
        src: "/home/ubuntu/runc.amd64"
        dest: "/home/ubuntu/runc"
        mode: 755
        remote_src: yes

    - name: copy binaries to /usr/local/bin
      copy:
        src: "/home/ubuntu/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        remote_src: yes
      loop: ["kubectl","kube-proxy","kubelet","runc","runsc"]

    # unpack stuff
    - name: unpack crictl stuff
      unarchive:
        src: "{{ crictl_URL }}"
        dest: /usr/local/bin/
        mode: 0755
        remote_src: yes

    - name: unpack cni-plugins stuff
      unarchive:
        src: "{{ cni_plugins_URL }}"
        dest: /opt/cni/bin/
        mode: 0755
        remote_src: yes

    - name: unpack containerd stuff
      unarchive:
        src: "{{ containerd_URL }}"
        dest: /
        mode: 0755
        remote_src: yes

    # CNI config
    - name: generate cni bridge config
      template:
        src: templates/networking/10-bridge.conf.j2
        dest: /etc/cni/net.d/10-bridge.conf
        mode: 0644
        owner: root
        group: root

    - name: generate cni loopback config
      template:
        src: templates/networking/99-loopback.conf.j2
        dest: /etc/cni/net.d/10-loopback.conf
        mode: 0644
        owner: root
        group: root

    # containerd config and systemd
    - name: generate containerd config file
      template:
        src: templates/kubelet/containerd-config.toml.j2
        dest: /etc/containerd/config.toml
        mode: 0644
        owner: root
        group: root

    - name: generate containerd systemd unit
      template:
        src: templates/kubelet/containerd.service.j2
        dest: /etc/systemd/system/containerd.service
        mode: 0644
        owner: root
        group: root

    # configure Kubelet
    - name: copy crypto stuff (SSL client auth)
      copy:
        src: "/home/ubuntu/{{ item }}"
        dest: "/var/lib/kubelet/"
        mode: 644
        remote_src: yes
      loop:
        - "{{ ansible_hostname }}.key"
        - "{{ ansible_hostname }}.crt"

    - name: copy crypto stuff (CA.crt)
      copy:
        src: "/home/ubuntu/ca.crt"
        dest: "/var/lib/kubernetes/"
        mode: 644
        remote_src: yes

    - name: copy kubeconfig
      copy:
        src: "/home/ubuntu/{{ ansible_hostname }}.kubeconfig"
        dest: "/var/lib/kubelet/kubeconfig"
        mode: 644
        remote_src: yes


    - name: generate kubelet-config.yaml
      template:
        src: templates/kubelet/kubelet-config.yaml.j2
        dest: /var/lib/kubelet/kubelet-config.yaml
        mode: 0644
        owner: root
        group: root

    - name: generate kubelet systemd unit
      template:
        src: templates/kubelet/kubelet.service.j2
        dest: /etc/systemd/system/kubelet.service
        mode: 0644
        owner: root
        group: root

    # Kube Proxy
    - name: copy kube-proxy.kubeconfig
      copy:
        src: "/home/ubuntu/kube-proxy.kubeconfig"
        dest: "/var/lib/kube-proxy/kubeconfig"
        mode: 644
        remote_src: yes

    - name: generate kube-proxy-config.yaml
      template:
        src: templates/kubelet/kube-proxy-config.yaml.j2
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml
        mode: 0644
        owner: root
        group: root

    - name: generate kube-proxy systemd unit
      template:
        src: templates/kubelet/kube-proxy.service.j2
        dest: /etc/systemd/system/kube-proxy.service
        mode: 0644
        owner: root
        group: root

    # start the services
    - name: start the Kubernetes worker services
      command: "{{ item }}"
      loop:
        - "sudo systemctl daemon-reload"
        - "sudo systemctl enable containerd kubelet kube-proxy"
        - "sudo systemctl restart containerd kubelet kube-proxy"

# verification
- hosts: masters
  remote_user: ubuntu
  become: true
  tasks:
    - name: check if control plane knows about workers
      command: "kubectl get nodes --kubeconfig admin.kubeconfig"
